{"name":"Esnext-class","tagline":"Write es6 like classes in es5 with a few more features","body":"esnext-class [![NPM version][npm-image]][npm-url] [![Build Status][build-status-image]][build-status-url] [![Code Climate][code-climate-image]][code-climate-url] [![Coverage][coverage-image]][coverage-url]\r\n============================\r\n\r\nWrite es6 like classes in es5 with a few more features\r\n\r\nCover some limitations to the current implementation of classes in es6:\r\n- define properties\r\n- use traits\r\n\r\n\r\n## Use\r\n\r\n```js\r\nvar newClass = require('esnext-class').newClass;\r\n\r\nvar A = newClass({\r\n    constructor: function A(value) {\r\n        this.initialized = value;\r\n    }\r\n});\r\n\r\nvar B = newClass({\r\n    name: 'B',\r\n    extends: A,\r\n\r\n    constructor(value) {\r\n        assert.strictEqual(this.constructor, B);\r\n        this.bValue = value;\r\n    }\r\n});\r\n\r\n```\r\n\r\n## Class special properties\r\n\r\n- `name`: set the name of the class\r\n- `abstract`: set the class as abstract\r\n- `constructor`: this is the constructor of the class, like the constructor function in es6 classes\r\n- `extends`: extends a class from another or from an object\r\n- `implements`: light checks over expected implementations and warn eventually when something is missing\r\n- `prototype`\r\n- `static`: define static properties in the class\r\n- `with`: an array of traits, objects with properties\r\n\r\n\r\n## Properties\r\n\r\nProperties are defined in the prototype. If you want to set a property in the instance, use the constructor to do that.\r\nIf you want to define a property in the object, use `static`.\r\n\r\n### Constant properties\r\n\r\nYou can set constant properties like this:\r\n\r\n```\r\nvar A = newClass({\r\n    name: 'A',\r\n    constantProperty: newClass.const('myValue');\r\n});\r\n\r\nA.prototype.constantProperty = 'anotherValue'; // Error !\r\n```\r\n\r\n### Lazy properties\r\n\r\n```\r\nvar A = newClass({\r\n    name: 'A',\r\n    lazyProperty: newClass.lazy(() => 'expensive result');\r\n});\r\n\r\n\r\nvar a = new A();\r\nconsole.log(a.lazyProperty); // the result of the function is set in `a.lazyProperty`\r\n\r\n```\r\n\r\n### Lazy constant properties\r\n\r\n```\r\nvar A = newClass({\r\n    name: 'A',\r\n    lazyAndConstProperty: newClass.lazyConst(() => 'expensive result');\r\n});\r\n\r\n\r\nvar a = new A();\r\nconsole.log(a.lazyAndConstProperty); // the result of the function is set in `a.lazyProperty`\r\n```\r\n\r\nNote: both the prototype function and the instance property values are constants.\r\n\r\n[build-status-image]: https://drone.io/github.com/christophehurpeau/esnext-class/status.png\r\n[build-status-url]: https://drone.io/github.com/christophehurpeau/esnext-class/latest\r\n[npm-image]: https://img.shields.io/npm/v/esnext-class.svg?style=flat\r\n[npm-url]: https://npmjs.org/package/esnext-class\r\n[coverage-image]: https://codeclimate.com/github/christophehurpeau/esnext-class/badges/coverage.svg\r\n[coverage-url]: http://christophehurpeau.github.io/esnext-class/coverage/lcov-report/lib/index.js.html\r\n[code-climate-image]: https://codeclimate.com/github/christophehurpeau/esnext-class/badges/gpa.svg\r\n[code-climate-url]: https://codeclimate.com/github/christophehurpeau/esnext-class\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}